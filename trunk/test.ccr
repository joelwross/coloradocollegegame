<resolver>
	<actions>
		<action>
			<name>move to</name>
			<inworld language="javascript">
			<![CDATA[
				var vector = argv[0];
				myLogger.message("Resolver got Move To command for id(" + subject.id() + "): " + vector[0] + " " + vector[1] + " " + vector[2] + "\n", false);
				subject.setPosition(vector);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>move</name>
			<inworld language="javascript">
			<![CDATA[
				var type = argv[0];
				var dvector = argv[1];
				if(type == Constants.MOVE_RELATIVE_TO_FACING)
				{
					dvector = Quaternions.rotatePoint(dvector,subject.getFacing());
				}

				var vector = subject.getPosition();
				for(i = 0; i < dvector.length; i++)
				{
					vector[i] += dvector[i];
				}
				subject.setPosition(vector);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>rotate to</name>
			<inworld language="javascript">
			<![CDATA[
				var vector = argv[0];
				myLogger.message("Resolver got Rotate To command for id(" + subject.id() + "): " + vector[0] + " " + vector[1] + " " + vector[2] + " " + vector[3] + "\n", false);
				subject.setFacing(vector);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>rotate</name>
			<inworld language="javascript">
			<![CDATA[
				var q = argv[0];
				var facing = Quaternions.mul(subject.getFacing(),q);
				subject.setFacing(facing);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>remove element</name>
			<inworld language="javascript">
			<![CDATA[
				myLogger.message("Resolver got Remove Element command for id " + subject.id() + "\n", false);
				subject.removeFromList();
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updatePresence(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>add element</name>
			<inworld language="javascript">
			<![CDATA[
				// test stuff
				if(argv[0].getClass() == GameElement)
				{
					returnVals.add(argv[0]);
					myLogger.message("Received a GameElement to add!\n", false);
				}
				else
				{
					returnVals.add(argv);
					myLogger.message("Received something with which to build a GameElement!\n", false);
				}
				status = Constants.ADD_ELEMENTS;
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updatePresence(argv[0]);
			]]>
			</inrepresentation>
		</action>
	</actions>
	<rules>
		<rule>
			<verb>move</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				var a = myActions.get("move").get(0);
				var parameters = new Array(1);

				var type = argv[0];
				var dvector = argv[1];
				if(type == Constants.MOVE_RELATIVE_TO_FACING)
				{
					dvector = Quaternions.rotatePoint(dvector,subject.getFacing());
				}
				for(var i = 0; i < relevant.length; i++)
				{
					myLogger.message("Testing collisions for:" + relevant.get(i).id() + " and " + subject.id() + "\n", false);
					if(subject.isColliding(relevant.get(i),dvector,null))
					{
						myLogger.message("Collision!" + relevant.get(i).id() + " " + subject.id() + "\n", false);
						status = Constants.FAILED;
						break;
					}
				}
				if(status == Constants.SUCCESS)
				{
					var vector = subject.copyPosition();
					for(i = 0; i < dvector.length; i++)
					{
						vector[i] += dvector[i];
					}
					parameters[0] = vector;

					actionsToSend.add("move to", a.getNouns(), parameters);
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>rotate</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				var q = argv[0];

				if(q.length != 4)
				{
					myLogger.message("Bad Quaternion length. Bad!\n", true);
					status = Constants.ERROR;
				}
				else
				{

					for(var i = 0; i < relevant.length; i++)
					{
						myLogger.message("Testing collisions for:" + relevant.get(i).id() + " and " + subject.id() + "\n", false);
						if(subject.isColliding(relevant.get(i),null,q))
						{
							myLogger.message("Collision!" + relevant.get(i).id() + " " + subject.id() + "\n", false);
							status = Constants.FAILED;
							break;
						}
					}
					if(status == Constants.SUCCESS)
					{
						facing = Quaternions.mul(subject.getFacing(),q);

						var a = myActions.get("rotate").get(0);
						var parameters = new Array(1);
						parameters[0] = facing;

						actionsToSend.add("rotate to", a.getNouns(), parameters);
					}
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>remove element</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				if(argv.length > 0)
				{
					var a = myActions.get("remove element").get(0);
					actionsToSend.add("remove element", a.getNouns());
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>add element</verb>
			<function language="javascript">
			<![CDATA[
				if(argv[0] == true)
				{
					argv[0] = argv[1];
					argv[1] = false;
					argv[0].attribute("write through", true);
					actionsToSend.add("add element", argv);
				}
			]]>
			</function>
		</rule>
	</rules>
</resolver>
