<resolver>
	<actions>
		<action>
			<name>move to</name>
			<inworld language="javascript">
			<![CDATA[
				var vector = argv[0];
				var velocity = argv[1];
				myLogger.message("Resolver got Move To command for id(" + subject.id() + "): " + vector[0] + " " + vector[1] + " " + vector[2] + "\n", false);
				subject.setPosition(vector);
				subject.attribute('velocity',velocity);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>move</name>
			<inworld language="javascript">
			<![CDATA[
				var type = argv[0];

				var dvector = new Array(argv[1].length);
				var velocity;
				if( !subject.attribute('velocity') )
				{
					velocity = java.lang.reflect.Array.newInstance(java.lang.Double, dvector.length);
					for(var i = 0; i < dvector.length; i++)
					{
						velocity[i] = 0;
					}
				}
				else
					velocity = subject.attribute('velocity');

				for( var i = 0; i < dvector.length; i++)
				{
					if(argv[1][i] != 0)
					{
						if(argv[1][i] > 0)
						{
							if(velocity[i] >= 0)
							{
								velocity[i]++;
							}
							else
							{
								velocity[i] = 0;
							}
						}
						else
						{
							if(velocity[i] <= 0)
							{
								velocity[i]--;
							}
							else
							{
								velocity[i] = 0;
							}
						}
					}
					else
					{
						velocity[i] = 0;
					}
				}

				subject.attribute('velocity', velocity);

				for( var i = 0; i < argv[1].length; i++ )
				{
					var vel = new Number(velocity[i]);
					if(vel > 0)
					{
						dvector[i] = 1;
//						dvector[i] = (Math.log(vel+1));
					}
					else if(vel < 0)
					{
						dvector[i] = -1;
//						dvector[i] = -1 * (Math.log(-1*vel+1));
					}
					else
					{
						dvector[i] = 0;
					}
				}

				if(type == Constants.MOVE_RELATIVE_TO_FACING)
				{
					dvector = Quaternions.rotatePoint(dvector,subject.getFacing());
				}

				var vector = subject.getPosition();
				for(i = 0; i < dvector.length; i++)
				{
					vector[i] += dvector[i];
				}
				subject.setPosition(vector);
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>rotate to</name>
			<inworld language="javascript">
			<![CDATA[
				var vector = argv[0];
				myLogger.message("Resolver got Rotate To command for id(" + subject.id() + "): " + vector[0] + " " + vector[1] + " " + vector[2] + " " + vector[3] + "\n", false);
				subject.setFacing(vector);
				subject.removeAttribute('velocity');
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>rotate</name>
			<inworld language="javascript">
			<![CDATA[
				var q = argv[0];
				var facing = Quaternions.mul(subject.getFacing(),q);
				subject.setFacing(facing);
				subject.removeAttribute('velocity');
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updateLocation(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>remove element</name>
			<inworld language="javascript">
			<![CDATA[
				myLogger.message("Resolver got Remove Element command for id " + subject.id() + "\n", false);
				returnVals.add(subject);
				status = Constants.REMOVE_ELEMENTS;
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updatePresence(subject);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>add element</name>
			<inworld language="javascript">
			<![CDATA[
				if(argv[0].getClass() == GameElement)
				{
					returnVals.add(argv[0]);
					myLogger.message("Received a GameElement to add!\n", false);
				}
				else
				{
					returnVals.add(argv);
					myLogger.message("Received something with which to build a GameElement!\n", false);
				}
				status = Constants.ADD_ELEMENTS;
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				if(argv == null)
				{
					myLogger.message("Problem in 'add element' -> argv is null\n", true);
				}
				else if(argv[0] == null)
				{
					myLogger.message("Problem in 'add element' -> argv[0] is null\n", true);
				}
				if(representation == null)
				{
					myLogger.message("Problem in 'add element' -> representation is null\n", true);
				}
				representation.updatePresence(argv[0]);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>receive world</name>
			<inworld language="javascript">
			<![CDATA[
				for(var i = 0; i < argv.length; i++)
				returnVals.add(argv[i]);
				status = Constants.ADD_ELEMENTS;
			]]>
			</inworld>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.updatePresence(argv[0]);
			]]>
			</inrepresentation>
		</action>

	<!-- Representation-only actions -->
		<action>
			<name>move camera</name>
			<inrepresentation language="javascript">
			<![CDATA[
				var type = argv[0];
				var dvector = argv[1];
				if(type == Constants.MOVE_RELATIVE_TO_FACING)
				{
					dvector = Quaternions.rotatePoint(dvector,representation.getCameraFacing());
				}
				representation.adjustCamera(dvector,null);
			]]>
			</inrepresentation>
		</action>
		<action>
			<name>rotate camera</name>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.adjustCamera(null, argv[0]);
			]]>
			</inrepresentation>
		</action>	

		<action>
			<name>change view</name>
			<inrepresentation language="javascript">
			<![CDATA[
				representation.changeView();
			]]>
			</inrepresentation>
		</action>
	</actions>
	<rules>
		<rule>
			<verb>move</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				var a = myActions.get("move").get(0);
				var parameters = new Array(2);

				var type = argv[0];

				var dvector = new Array(argv[1].length);
				var velocity;
				if( !subject.attribute('velocity') )
				{
					velocity = java.lang.reflect.Array.newInstance(java.lang.Double, dvector.length);
					for(var i = 0; i < dvector.length; i++)
					{
						velocity[i] = 0;
					}
				}
				else
					velocity = subject.attribute('velocity');

				for( var i = 0; i < dvector.length; i++)
				{
					if(argv[1][i] != 0)
					{
						if(argv[1][i] > 0)
						{
							if(velocity[i] > 0)
							{
								velocity[i]++;
							}
							else
							{
								velocity[i] = 0;
							}
						}
						else
						{
							if(velocity[i] > 0)
							{
								velocity[i] = 0;
							}
							else
							{
								velocity[i]--;
							}
						}
					}
					else
					{
						velocity[i] = 0;
					}
				}

				for( var i = 0; i < argv[1].length; i++ )
				{
					var vel = new Number(velocity[i]);
					if(vel > 0)
					{
						dvector[i] = 1;
//						dvector[i] = (Math.log(vel+1));
					}
					else if(vel < 0)
					{
						dvector[i] = -1;
//						dvector[i] = -1 * (Math.log(-1*vel+1));
					}
					else
					{
						dvector[i] = 0;
					}
				}

				if(type == Constants.MOVE_RELATIVE_TO_FACING)
				{
					dvector = Quaternions.rotatePoint(dvector,subject.getFacing());
				}
				var vector = subject.copyPosition();
				for(i = 0; i < dvector.length; i++)
				{
					vector[i] += dvector[i];
				}
				for(var i = 0; i < relevant.length; i++)
				{
	subject.findMovableDistance(relevant.get(i),dvector);
					if(subject.isColliding(relevant.get(i),vector,null))
					{
						myLogger.message("Collision!" + relevant.get(i).id() + " " + subject.id() + "\n", false);
						subject.removeAttribute("velocity");
						status = Constants.FAILED;
						break;
					}
				}
				if(status == Constants.SUCCESS)
				{
					parameters[0] = vector;
					parameters[1] = velocity;

					actionsToSend.add("move to", a.getNouns(), parameters);
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>rotate</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				var q = argv[0];

				if(q.length != 4)
				{
					myLogger.message("Bad Quaternion length. Bad!\n", true);
					status = Constants.ERROR;
				}
				else
				{
					facing = Quaternions.mul(subject.getFacing(),q);

					for(var i = 0; i < relevant.length; i++)
					{
						myLogger.message("Testing collisions for:" + relevant.get(i).id() + " and " + subject.id() + "\n", false);
						if(subject.isColliding(relevant.get(i),null,facing))
						{
							myLogger.message("Collision!" + relevant.get(i).id() + " " + subject.id() + "\n", false);
							status = Constants.FAILED;
							break;
						}
					}
					if(status == Constants.SUCCESS)
					{

						var a = myActions.get("rotate").get(0);
						var parameters = new Array(1);
						parameters[0] = facing;

						actionsToSend.add("rotate to", a.getNouns(), parameters);
					}
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>remove element</verb>
			<function language="javascript">
			<![CDATA[
				var status = Constants.SUCCESS;
				if(argv.length > 0)
				{
					var a = myActions.get("remove element").get(0);
					actionsToSend.add("remove element", a.getNouns());
				}
			]]>
			</function>
		</rule>
		<rule>
			<verb>add element</verb>
			<function language="javascript">
			<![CDATA[
				if(argv[0] == true)
				{
					argv[0] = argv[1];
					argv[1] = false;
					argv[0].attribute("write through", true);
					actionsToSend.add("add element", argv);
				}
			]]>
			</function>
		</rule>
	</rules>
</resolver>